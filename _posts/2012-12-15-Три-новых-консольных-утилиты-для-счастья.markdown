---
layout: post
category : work
comments : true
tags : [shell, tmux, gtd, ssh]
---

В последнее время я добавил в свой арсенал консольных утилит три новые штучки, которые приносят заметную пользу. Захотелось написать про них пару слов.

Всё написанное ниже стоит рассматривать через призму "я линуксоид, который уйму времени проводит в консоли". Если для Вас это не верно, то мой опыт вряд ли окажется полезным.

## Tmux

Первым на сцену выходит [terminal multiplexer](http://tmux.sourceforge.net/). Я давно уже слышал о великом противостоянии Screen vs. Tmux, и всё хотел попробовать их в деле и определиться со своей стороной. Когда же наконец решился, выбор оказался до безумного прост.

<blockquote class="twitter-tweet"><p>Всего два дня на <a href="https://twitter.com/search/%23tmux">#tmux</a>, и я уже не понимаю, как жил без него раньше ;(</p>&mdash; Andrey Hitrin (@ahitrin) <a href="https://twitter.com/ahitrin/status/270866557855469568" data-datetime="2012-11-20T12:29:54+00:00">November 20, 2012</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

Оказалось, что хоткеи tmux запоминаются очень быстро и легко. По удобству использования он влёгкую обделывает обычный терминал. Кроме того, порой дико выручает сохранение сессии - фича, знакомая всем пользователям подобного софта.

<blockquote class="twitter-tweet"><p>Теперь есть табы даже в банальном xterm, и, что важнее, рабочая сессия доступна и с планшета, и с ноута из дома - был бы только ssh-доступ</p>&mdash; Andrey Hitrin (@ahitrin) <a href="https://twitter.com/ahitrin/status/270867410188394496" data-datetime="2012-11-20T12:33:17+00:00">November 20, 2012</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

Но ещё более приятным оказалось возможность открывать несколько терминалов в одном табе. Если они связаны _единой задачей_, то такой способ размещения оказывается наиболее естественным и удобным. Вся необходимая информация оказывается на одном экране. В каком-нибудь gnome terminal в этом случае всё равно пришлось бы скакать между разными вкладками (и ещё всё время вспоминать, на какую конкретно надо перейти).

Не обошлось и без маленькой ложки дёгтя. Мои пальцы теперь стали иногда вызывать хоткеи tmux в vim. Неприятный сайд-эффект, но, думаю, я с ним разберусь.

## t

Я использую несколько разных таск-трекеров, каждый для своей цели. Официальный рабочий инструмент - это Redmine, главный личный инструмент - это Google Tasks. Но они оказываются слишком громоздкими, когда ты разбил большую задачу на много мелких частей и пытаешься быстро добавлять и удалять их в ходе работы.

Покопавшись в памяти, я внезапно нашёл решение и опробовал его в деле.

<blockquote class="twitter-tweet"><p>t <a href="http://t.co/kU3P11da" title="http://stevelosh.com/projects/t/">stevelosh.com/projects/t/</a> отлично подходит для управления кучей мелких текущих задач, которые нет смысла трекать в серьёзных менеджерах</p>&mdash; Andrey Hitrin (@ahitrin) <a href="https://twitter.com/ahitrin/status/274387966267387905" data-datetime="2012-11-30T05:42:43+00:00">November 30, 2012</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

Всё очень просто и удобно. Пришла мысль в голову - тут же записал её, не отрываясь от консоли: `t какая-то задача`. Самое крутое в том, что не надо ничего дополнительно открывать, ничего дополнительно запускать, не надо думать, _куда_ отправится задача. Ты её просто записал, и она просто сохранилась.

Затем смотрим список всех задач, выбираем ровно одну и доводим её до конца. Вычёркиваем из списка и выбираем новую. В процессе работы возникает важная мысль - просто кидаем её в t. Разберёмся потом. В общем, стандартный GTD-процесс :)

Одной из фич t является то, что список задач никак не упорядочен. Честно говоря, _иногда_ хочется чего-то более упорядоченного. Например, во время рефакторинга кода с применением [Mikado Method](http://mikadomethod.org/), когда все цели зависят друг от друга. Было бы круто найти (или, на крайний случай, сделать) что-то подобное для mikado. Будет удобно.

## ssh-agent

На эту тему никаких твитов не было :)

Всё довольно тривиально. Если Вы часто работаете с ssh, то знаете, что он часто просит пароль. Если использовать ключи, то они тоже просят пароль. При частом общении с ssh (например, во время активной синхронизации с внешними серверами в git) это быстро становится довольно утомительным. ssh-agent - это один из механизмов, которые позволяют ввести пароль лишь однажды за сессию, а затем поручить этот процесс машине.

Конечно, при работе под Gnome или KDE есть свои графические аналоги ssh-agent, которые решают ту же задачу. Но ведь на них не заканчивается список оконных менеджеров, верно? На рабочем компьютере я сейчас использую Openbox, потому что он работает быстрее и почти не сношает мозг, в отличие от. Поэтому ssh-agent пришёлся мне вполне ко двору.

В общем, просто оставлю здесь [мануал](http://xgu.ru/wiki/%D0%A3%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5_%D0%BA%D0%BB%D1%8E%D1%87%D0%B0%D0%BC%D0%B8_SSH_%D1%81_%D0%BF%D0%BE%D0%BC%D0%BE%D1%89%D1%8C%D1%8E_%D0%B0%D0%B3%D0%B5%D0%BD%D1%82%D0%B0) по этой полезной утилите.

## Послесловие

Описывая все эти инструменты, я чувствовал себя в некотором роде слоупоком. В самом деле, все они уже достаточно давно существуют и довольно широко известны (за исключением t, пожалуй). С другой стороны, для кого-то другого эта информация может оказаться новой и (скромно надеюсь) полезной. На пути к совершенству много шагов, и каждый из них важен. Я стал чуть более продуктивен с tmux, чуть более организован с t и испытываю меньше боли в пальцах с ssh-agent. Надеюсь, эта информация о них послужат кому-то ещё.
