---
layout: post
category : work
comments : true
title: О темпоральной логике
tags : [continuous integration, continous delivery]
---
{% include JB/setup %}

Давеча позволил себе немного пожаловаться в твиттер:

<blockquote class="twitter-tweet" lang="en"><p lang="ru" dir="ltr">Человеческий мозг крайне плохо умеет работать с темпоральной логикой - вот причина многих ошибок в <a href="https://twitter.com/hashtag/IT?src=hash">#IT</a></p>&mdash; Andrey Hitrin (@ahitrin) <a href="https://twitter.com/ahitrin/status/605735862450712576">June 2, 2015</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" lang="en"><p lang="ru" dir="ltr">Особенно, если изменения затрагивают несколько систем</p>&mdash; Andrey Hitrin (@ahitrin) <a href="https://twitter.com/ahitrin/status/605736117296611328">June 2, 2015</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

Небольшое _наблюдение_ за окружающей средой: возможно, мы (разработчики) недооцениваем, насколько часто мы ошибаемся при разработке взаимодействия распределённых систем.

Пускай у разработчика есть система А и система B.
Они каким-то образом друг с другом взаимодействуют.
И в один прекрасный момент возникает необходимость что-то поменять в одной из этих систем (пускай, A → A').

Окей, говорит себе разработчик, тыжпрограммист!
Система A меняется, значит, надо поменять и систему B, чтобы она знала про эти изменения.
Берёт и адаптирует систему B к новым изменениям (B → B'), и думает, что молодец.

А затем, в продакшене, оказывается, что системы могут обновляться по отдельности, и наша система A' встаёт рядом с необновлённой B.
Или, наоборот, B' пытается ужиться со старой A.

И никто за разработчика не подумал, что же будет в таком случае.
А может быть что угодно.
Потому что новый способ работы далеко не всегда бывает совместим со старым.
Не совпадают протоколы, меняются опции вызова, формат хранения данных...

И это, разумеется, приводит к появлению самых разнообразных отказов и фейлов, про которые никто не подумал заранее.

Мораль у сказа до тупости простая: разработка ПО - это не та область деятельности, где годится применять экономию мышления, столь любимую нашим ленивым мозгом.
На любое изменение полезно смотреть не только в статике ("как есть сейчас" vs. "как должно быть"), но и в динамике ("как пройти из A в A' и ничего не сломать по дороге").
Можно называть этот подход хоть "темпоральной логикой" (по определению: учёт причинно-следственных связей в условиях времени), хоть системным анализом, хоть continuous delivery, хоть горшком - но только <s>в печку не ставить</s> не забывать.
